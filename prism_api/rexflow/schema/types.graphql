
# Scalar types

scalar SessionId

scalar WorkflowInstance

scalar WorkflowDeployment

scalar TaskId

scalar DataId

scalar State

# Enum types

enum WorkflowStatus {
    COMPLETED
    ERROR
    RUNNING
    START
    STARTING
    STOPPED
    STOPPING
}

enum TaskStatus {
    UP
    DOWN
}

enum OperationStatus {
    SUCCESS
    FAILURE
}

"""Client side constraints for user input"""
enum ValidationType {
    REQUIRED
    REGEX
}

"""Data request types that will be mapped to UI components"""
enum DataType {
    TEXT
}

# Data structures

type Session {
    id: SessionId!
    state: State!
}

type Workflow {
    """Id for a workflow instance"""
    iid: WorkflowInstance!
    """Id for a workflow deployment"""
    did: WorkflowDeployment
    status: WorkflowStatus!
    tasks(filter: TaskFilter): [Task!]!
}

"""A task will request a list of data elements"""
type Task {
    id: TaskId!
    data: [TaskData!]!
    status: TaskStatus!
}

"""Individual data element that will map to a component on the UI"""
type TaskData {
    id: DataId!
    type: DataType!
    order: Int!
    label: String
    data: String
    encrypted: Boolean!
    validators: [Validator!]!
}

type Validator {
    type: ValidationType!
    """For regex validation the regex should go here"""
    constraint: String
}

# Data filters

"""Filter for the active workflows"""
input WorkflowFilter {
    ids: [WorkflowInstance!]!
    status: WorkflowStatus
}

input TaskFilter {
    ids: [TaskId!]!
    status: TaskStatus
}
