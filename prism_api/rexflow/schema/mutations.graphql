type Mutation {
    workflow: WorkflowMutations
    instance(filter: InstanceFilter): InstanceMutations
}

type WorkflowMutations {
    """Start a new workflow"""
    start(input: StartWorkflowInput!): StartWorkflowPayload
}

type InstanceMutations {
    save(input: SaveInstanceInput): SaveInstancePayload

    validate(input: ValidateInstanceInput): ValidateInstancePayload

    complete(input: CompleteInstanceInput): CompleteInstancePayload 
}

# Mutations inputs

input StartWorkflowInput {
    """Id of workflow deployment"""
    did: WorkflowDeployment!
}

input ValidateInstanceInput {
    """List of tasks to be validated"""
    tasks: [TaskInput!]!
}

input SaveInstanceInput {
    """List of tasks to be modified"""
    tasks: [TaskInput!]!
}

input TaskInput {
    id: TaskId!
    """Data to be saved"""
    data: [TaskDataInput!]!
}

input TaskDataInput {
    id: DataId!
    data: String!
}

input CompleteInstanceInput {
    """Ids of task to be completed"""
    ids: [TaskId!]!
}

# Response payloads

type StartWorkflowPayload {
    status: OperationStatus!
    iid: WorkflowInstance
    workflow: Workflow
    errors: [WorkflowProblems!]
    query: Query
}

type ValidateTaskPayload {
    status: OperationStatus!
    tasks: [Task!]
    errors: [TaskProblems!]
    query: Query
}

type SaveTasksPayload {
    status: OperationStatus!
    tasks: [Task!]
    errors: [TaskProblems!]
    query: Query
}

type CompleteTasksPayload {
    status: OperationStatus!
    tasks: [Task!]
    errors: [TaskProblems!]
    query: Query
}
