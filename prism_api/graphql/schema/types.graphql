
# Scalar types

scalar SessionId

scalar WorkflowInstanceId

scalar WorkflowDeploymentId

scalar WorkflowMetadata

scalar WorkflowDirectory

scalar TaskId

scalar DataId

scalar ExchangeId

scalar State

# Enum types

enum WorkflowStatus {
    COMPLETED
    ERROR
    RUNNING
    START
    STARTING
    STOPPED
    STOPPING
}

enum TaskStatus {
    UP
    DOWN
}

enum OperationStatus {
    SUCCESS
    FAILURE
    WITH_ERRORS
}

"""Client side constraints for user input"""
enum ValidationType {
    BOOLEAN
    REQUIRED
    INTERVAL
    PERCENTAGE
    POSITIVE
    REGEX
}

"""Data request types that will be mapped to UI components"""
enum DataType {
    COPY
    TEXT
    CURRENCY
    INTEGER
    FLOAT
    BOOLEAN
    PERCENTAGE
    TABLE
    WORKFLOW
}

enum TextVariant {
    BODY1
    BODY2
    H1
    H2
    H3
    H4
    H5
    H6
    SUBTITLE1
    SUBTITLE2
}

# Data structures

type Session {
    id: SessionId!
    state: State!
}

type WorkflowDeployment {
    name: String!
    did: WorkflowDeploymentId
    deployments: [WorkflowDeploymentId!]!
}

type Metadata {
    key: String!
    value: String!
}

type Workflow {
    """Id for a workflow instance"""
    iid: WorkflowInstanceId!
    """Id for a workflow deployment"""
    did: WorkflowDeploymentId!
    name: String
    status: WorkflowStatus!
    metadata: [Metadata!]!
    metadataDict: WorkflowMetadata!
    tasks(filter: TaskFilter): [Task!]!
}

"""A task will request a list of data elements"""
type Task {
    iid: WorkflowInstanceId!
    tid: TaskId!
    data: [TaskFieldData!]!
    status: TaskStatus!
}

"""Individual data element that will map to a component on the UI"""
type TaskFieldData {
    dataId: DataId!
    type: DataType!
    order: Int!
    label: String
    data: String
    value: String
    variant: TextVariant
    encrypted: Boolean!
    validators: [Validator!]!
}

type Validator {
    type: ValidationType!
    """For regex validation the regex should go here"""
    constraint: String
}

# Data filters

"""Filter for the active workflows"""
input WorkflowFilter {
    ids: [WorkflowInstanceId!]!
}

input TaskFilter {
    ids: [TaskId!]!
}
