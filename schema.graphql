
"""Types declaration"""

scalar SessionId

scalar WorkflowId

scalar WorkflowType

scalar TaskId

scalar State

enum WorkflowStatus {
    WAITING
    IN_PROGRESS
    FINISHED
}

enum TaskStatus {
    IN_PROGRESS
    FINISHED
}

enum Validator {
    REQUIRED
    NUMERIC
    PHONE_NUMBER
    EMAIL
}

enum DataType {
    TEXT
}

"""Query declaration"""

type Query {
    session: Session!
    workflows(filter: WorkflowFilter): [Workflow!]!
}

type Session {
    id: SessionId!
    state: State!
}

input WorkflowFilter {
    ids: [WorkflowId!]!
    status: WorkflowStatus
}

type Workflow {
    id: WorkflowId!
    type: WorkflowType
    status: WorkflowStatus!
    tasks(filter: TaskFilter): [Task!]!
}

input TaskFilter {
    ids: [TaskId!]!
    status: TaskStatus
}

type Task {
    id: TaskId!
    data: [TaskData!]!
    status: TaskStatus!
    errors: [TaskProblems!]!
}

type TaskData {
    request: String!
    type: DataType!
    data: String
    encrypted: Boolean!
    validators: [Validator!]!
}

"""Mutation declaration"""

type Mutation {
    session: SessionMutation

    workflow: WorkflowMutation
}

type SessionMutation {
    start: StartSessionPayload
    state: StateMutation
    close: CloseSessionPayload
}

type StateMutation {
    update(input: UpdateStateInput!): UpdateStatePayload
}

type WorkflowMutation {
    init(input: InitWorkflowInput!): InitWorkflowPayload

    task: TaskMutation
}

type TaskMutation {
    saveData(input: SaveDataInput!): SaveDataPayload
    complete(input: CompleteTaskInput!): CompleteTaskPayload
}

type StartSessionPayload {
    session: Session!
    errors: [SessionProblems!]!
}

input UpdateStateInput {
    state: State!
}

type UpdateStatePayload {
    status: Boolean!
    errors: [UpdateStateProblems!]!
    state: String!
}

type CloseSessionPayload {
    status: Boolean!
    errors: [SessionProblems!]!
}

input InitWorkflowInput {
    type: WorkflowType!
}

type InitWorkflowPayload {
    status: Boolean!
    workflow: Workflow!
    errors: [WorkflowProblems!]!
}

input SaveDataInput {
    id: TaskId!
    data: [TaskDataInput!]!
}

input TaskDataInput {
    data: String!
}

type SaveDataPayload {
    status: Boolean!
    task: Task!
    errors: [TaskProblems!]!
}

input CompleteTaskInput {
    id: TaskId!
}

type CompleteTaskPayload {
    status: Boolean!
    task: Task!
    errors: [TaskProblems!]!
}

"""Errors declaration"""

union UpdateStateProblems = ParsingProblem

union TaskProblems = ValidationProblem

union SessionProblems = ServiceNotAvailableProblem

union WorkflowProblems = ServiceNotAvailableProblem

interface ProblemInterface {
    message: String!
}

type ParsingProblem implements ProblemInterface {
    message: String!
}

type ValidationProblem implements ProblemInterface {
    message: String!
    validator: Validator!
}

type ServiceNotAvailableProblem implements ProblemInterface {
    message: String!
}
